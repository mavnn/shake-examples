# Ensure ssh-agent is running before starting nix.
# For `stack`, `nix-shell` is bundling a version of `git` which relies on
# `OpenSSH`. The version of `OpenSSH` bundled with `nix` does not have support
# for MacOS' keychain, and so every time you fire of a `git` command from within
# `nix-shell` you'll be prompted for the passphrase of your ssh key.
# We can circumvent this by ensuring an `ssh-agent` is running before we enter
# the nix-shell, which is what the following command does.
#
# This only works for users that have MacOS's version of openssh installed, if
# you brewed another version it might not have the `-K` option. We will try to
# run the command, but not complain if it fails.
ssh-add -K &> /dev/null || true

# keep dynamic SSH_AUTH_SOCK, ignoring whatever was saved to direnv cache by `direnv dump`
# note: we re-set this at the end of the file
my_ssh_auth_sock=$SSH_AUTH_SOCK


# Load `shell.nix` binaries onto path.

# Usage: use nix_shell
#
# Works like use_nix, except that it's only rebuilt if the shell.nix or default.nix file changes.
# This avoids scenarios where the nix-channel is being updated and all the projects now need to be re-built.
#
# To force the reload the derivation, run `touch shell.nix`
use_nix_shell() {
  local nixcache=".direnv.cache"
  local tempfile=

  if [[ ! -e "$nixcache" ]] || [[ ".envrc" -nt "$nixcache" ]] || [[ "default.nix" -nt "$nixcache" ]] || [[ "shell.nix" -nt "$nixcache" ]]; then
    tempfile="$(mktemp "$nixcache.XXXXXX")"
    nix-shell --show-trace --run 'direnv dump' > "$tempfile" && mv "$tempfile" "$nixcache"
    rm -f "$tempfile"
    tempfile=
  fi
  direnv_load cat "$nixcache"
  for f in $(git ls-files '*.nix'); do
    watch_file $f
  done
}

use_lorri() {
  eval "$(lorri direnv)"

  target="$(lsof -p "$$" | grep cwd | awk '{ print $9 }')"
  for pid in $(ps -o pid,command | grep 'lorri watch' | grep -v 'grep' | awk '{ print $1 }'); do
    if lsof -p "$pid" | grep cwd | grep -q "$target"; then
      echo "using existing lorri watch with pid $pid"
      return 0;
    fi
  done

  # existing lorri watch wasn't found
  lorri watch > lorri.log &
  lorri_pid=$!
  disown $lorri_pid
  echo "started lorri watch with pid $lorri_pid"
}

# Configure a custom nix Cache
export NIX_CONF_DIR="$(pwd)"

if which lorri > /dev/null; then
  use_lorri
else
  use_nix_shell
fi

export SSH_AUTH_SOCK=$my_ssh_auth_sock
